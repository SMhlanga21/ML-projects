# -*- coding: utf-8 -*-
"""Credit Card Fraud.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16Ms_a0-mB0ZnBoyB33YTgYLrjyLcXkhu
"""

import seaborn
import pandas as pd
import numpy as np
import codecademylib3
import matplotlib.pyplot as plt
from sklearn.linear_model import LogisticRegression
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
import codecademylib3

# Load the data
transactions = pd.read_csv('transactions_modified.csv')
print(transactions.head())
print(transactions.info())

# How many fraudulent transactions?
fraudy = transactions['isFraud'].value_counts()
print(fraudy)

# Summary statistics on amount column
sum_stats = transactions['amount'].describe()
print(sum_stats)

# Create isPayment field
transactions['isPayment'] = 0
transactions['isPayment'][transactions['type'].isin(['PAYMENT','DEBIT'])] = 1

# Create isMovement field
transactions['isMovement'] = 0
transactions['isMovement'][transactions['type'].isin(['CASH_OUT','TRANSFER'])] = 1

# Create accountDiff field
transactions['accountDiff'] = np.absolute(transactions['oldbalanceOrg'] - transactions['oldbalanceDest'])

# Create features and label variables
features = transactions[['amount', 'isPayment', 'isMovement', 'accountDiff']]
label = transactions['isFraud']

# Split dataset
x_train, x_test, y_train, y_test = train_test_split(features, label, train_size = 0.7, test_size = 0.3)

# Normalize the features variables
scaler = StandardScaler()
scaler.fit_transform(x_train)
scaler.transform(x_test)

# Fit the model to the training data
lr = LogisticRegression()
lr.fit(x_train, y_train)

# Score the model on the training data
print(lr.score(x_train, y_train))

# Score the model on the test data
print(lr.score(x_test, y_test))

# Print the model coefficients
print(lr.coef_)

# New transaction data
transaction1 = np.array([123456.78, 0.0, 1.0, 54670.1])
transaction2 = np.array([98765.43, 1.0, 0.0, 8524.75])
transaction3 = np.array([543678.31, 1.0, 0.0, 510025.5])

# Create a new transaction
your_transaction = np.array([123456.00, 1.0, 0.0, 123456.00])

# Combine new transactions into a single array
sample_transactions = np.array([transaction1, transaction2, transaction3, your_transaction])

# Normalize the new transactions
scaler.transform(sample_transactions)

# Predict fraud on the new transactions
predicted_samples = lr.predict(sample_transactions)

# Show probabilities on the new transactions
print(lr.predict_proba(sample_transactions))