# -*- coding: utf-8 -*-
"""Top 5 league position predictor mlr.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gtlJTuZ6aAzOrC2n6WACjg6eZVNsFU0H
"""

pip install boto3

import boto3
import pandas as pd
import io

# Create an S3 client
aws_s3_bucket = ''

s3 = boto3.client(
        's3',
        aws_access_key_id='',
        aws_secret_access_key='')

#read csv file from s3
response = s3.get_object(Bucket=aws_s3_bucket, Key='EU Top Five Leagues 2020-2024.csv')

merged_seasons = pd.read_csv(io.BytesIO(response['Body'].read()))

ml_set = merged_seasons.drop(['league', 'season', 'team', 'Playing Time_MP', 'Playing Time_Starts', 'Playing Time_Min', 'Rk', 'Playing Time_90s', 'url_', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'xG', 'Top Team Scorer', 'Attendance', 'Pts/MP', 'xGD/90'], axis=1)

ml_set.info()

X = ml_set.loc[:, ml_set.columns != 'Pts']
y = ml_set['Pts']

from sklearn.preprocessing import StandardScaler
scaler = StandardScaler()

standardized_x = scaler.fit_transform(X)

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(standardized_x, y, test_size=0.2, random_state=42)

from sklearn.linear_model import LinearRegression

model = LinearRegression()
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

print(model.score(X_test, y_test))

print(model.coef_)

import numpy as np
from sklearn.metrics import confusion_matrix
print(y_test.shape)
print(confusion_matrix(y_test, y_pred.astype(int)))

# accuracy:
y_pred_new = y_pred.astype(int)


from sklearn.metrics import accuracy_score
print(accuracy_score(y_test, y_pred_new))


# precision:
from sklearn.metrics import precision_score
print(precision_score(y_test, y_pred_new, average = 'micro'))


# recall:
from sklearn.metrics import recall_score
print(recall_score(y_test, y_pred_new, average = 'micro'))


# F1 score
from sklearn.metrics import f1_score
print(f1_score(y_test, y_pred_new, average = 'micro'))

print(y_pred_new)

url = 'https://fbref.com/en/comps/9/2018-2019/2018-2019-Premier-League-Stats'

df = pd.read_html(url)

print(df[0])

epl1819_other =  df[0]
epl1819_other['season'] = '2023-2024'
epl1819_other.head()

epl1819_other = epl1819_other.drop(['Goalkeeper', 'Notes'], axis=1)

epl1819_other['team'] = epl1819_other['Squad']

epl1819_other.info()

pip install soccerdata

from soccerdata import FBref
import pandas as pd

reader = FBref(seasons=['1819'])

season_data = reader.read_team_season_stats()

season_data.columns = ['_'.join(col).strip() for col in season_data.columns.values]

flat_seasons = season_data.reset_index()

seasons_dict = {'1819': '2018-2019', '1920': '2019-2020', '2021': '2020-2021', '2122': '2021-2022', '2223': '2022-2023', '2324': '2023-2024'}

flat_seasons['season'] = flat_seasons['season'].map(seasons_dict)

top_five_leagues1819 = flat_seasons[flat_seasons['league'].isin(['ENG-Premier League', 'ESP-La Liga', 'ITA-Serie A', 'GER-Bundesliga', 'FRA-Ligue 1'])]

top_five_leagues1819['season'].unique()

epl1819 = top_five_leagues1819[top_five_leagues1819['league'] == 'ENG-Premier League']

epl1819.info()

merged_1819 = pd.merge(epl1819, epl1819_other, on=['team'])

merged_1819.info()

inference_set = merged_1819.drop(['league', 'season_x', 'season_y', 'team', 'Playing Time_MP', 'Playing Time_Starts', 'Playing Time_Min', 'Playing Time_90s', 'Rk', 'url_', 'Squad', 'MP', 'W', 'D', 'L', 'GF', 'xG', 'Top Team Scorer', 'Attendance', 'Pts/MP', 'xGD/90'], axis=1)

X_inference = inference_set.loc[:, inference_set.columns != 'Pts']
y_inference = inference_set['Pts']

print(X_inference.shape)

X_inference.info()

standardized_x_inference = scaler.fit_transform(X_inference)

inference_results = model.predict(standardized_x_inference)

print(inference_results)

print(merged_1819[['team', 'Pts']])

